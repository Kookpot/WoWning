<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Home Page" xml:space="preserve">
    <value>Home Page</value>
  </data>
  <data name="Idea" xml:space="preserve">
    <value>Idea</value>
  </data>
  <data name="Intro" xml:space="preserve">
    <value>&lt;p&gt;As WoW Classic is being restarted a lot of people will be in need of gear, potions, enchants, food, ... &lt;/p&gt;
    &lt;p&gt;A lot of these things will be available on the AH but there are a few shortcomings.&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;The prices of items on the AH are sometimes outrageous in comparison to the actual materials required for crafting the item&lt;/li&gt;
        &lt;li&gt;The item that you desperately need might not be listed on the AH&lt;/li&gt;
        &lt;li&gt;You may have the materials required for the item that you want but you want to avoid the hassle of selling those materials to get money to buy the item you want&lt;/li&gt;
        &lt;li&gt;There are no vellums so enchanting still needs to be done by manually trading&lt;/li&gt;
        &lt;li&gt;The prices on AH can be very volatile and not all players use the AH with the best intentions&lt;/li&gt;
        &lt;li&gt;Nothing beats the personal interaction of a manual trade&lt;/li&gt;
        &lt;li&gt;...&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;So, what we propose is a system where people advertise all the recipes they have together with the tip they expect when crafting the recipe for someone.&lt;/p&gt;
    &lt;p&gt;Through a simple search, you can see which characters have a certain recipe on your server and contact the player in-game. It's that easy.&lt;/p&gt;
    &lt;h4&gt;Things we don't do&lt;/h4&gt;
    &lt;p&gt;We will not use your data to give to any external service or party. Your data is secured within our own walls.&lt;/p&gt;
    &lt;p&gt;The data you input will only be used by other users when displaying individual recipes! We do not expose all your recipes at once to another user.&lt;/p&gt;
    &lt;p&gt;We're simply enabling you to identify other players on your server. The actual act of contacting, negotiating and the actual transaction is your responsibility.&lt;/p&gt;
    &lt;p&gt;If any transaction goes wrong, we at WoWning.com cannot be held responsible. You can always give that player a thumbs down. &lt;/p&gt;
    &lt;h4&gt;How does it work?&lt;/h4&gt;
    &lt;p&gt;First of alll, create an account by registering (PLEASE use a different password than your WoW-password!) or by logging in through Facebook, Twitter, Google or Microsoft.&lt;/p&gt;
    &lt;p&gt;Once logged in, you can create characters by going to the 'Character' menu and clicking on 'Create New'. Some required data is needed to uniquely identify your character(s)&lt;/p&gt;
    &lt;p&gt;For each character, you can add known recipes in the 'Recipes' menu. Simply select a character and one of its professions to load a list of all the possible recipes.&lt;/p&gt;
    &lt;p&gt;Simply select a recipe and fill in the expected tip and click save to start advertising your recipe to other players.&lt;/p&gt;
    &lt;p&gt;To find a recipe from other players on your server, go to the 'Search' menu and select the server and side and start entering the recipe you want.&lt;/p&gt;
    &lt;p&gt;When searching, a list of players will be shown who own the recipe. Also the name of the alts for that player on that server are shown so you can try to contact the player more easily.&lt;/p&gt;
    &lt;p&gt;Was the transaction succesful? Give the player a thumbs up! Only give a thumbs down when the other player tried to cheat you in any way.&lt;/p&gt;
    &lt;p&gt;You can only recommend or dislike another player once a week!&lt;/p&gt;
    &lt;h4&gt;Questions? &lt;/h4&gt;
    &lt;p&gt;Any questions, bugs or idea can be posted through our &lt;a style="color: #007bff;" href="./Landingpage/Main/Contact"&gt;contact form&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
</root>